{
    "sourceFile": "blueprints/auth.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1740478221878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740478312221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,9 @@\n             stored_hash = user[\"password_hash\"].encode('utf-8')\r\n             if bcrypt.checkpw(password.encode('utf-8'), stored_hash):\r\n                 session['logged_in'] = True\r\n                 session['username'] = username\r\n+                session['user_type'] = user['user_type']\r\n                 return redirect(url_for('dashboard.dashboard'))\r\n             else:\r\n                 flash(\"Invalid username or password\", \"error\")\r\n         else:\r\n"
                },
                {
                    "date": 1740479597377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,9 @@\n         \r\n         user = get_user(username)\r\n         if user:\r\n             stored_hash = user[\"password_hash\"].encode('utf-8')\r\n+            print(stored_hash)\r\n             if bcrypt.checkpw(password.encode('utf-8'), stored_hash):\r\n                 session['logged_in'] = True\r\n                 session['username'] = username\r\n                 session['user_type'] = user['user_type']\r\n"
                },
                {
                    "date": 1740479631082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,13 +147,13 @@\n     \"\"\"\r\n     if request.method == 'POST':\r\n         username = request.form.get('username')\r\n         password = request.form.get('password')\r\n-        \r\n+        print(username)\r\n+        print(password)\r\n         user = get_user(username)\r\n         if user:\r\n             stored_hash = user[\"password_hash\"].encode('utf-8')\r\n-            print(stored_hash)\r\n             if bcrypt.checkpw(password.encode('utf-8'), stored_hash):\r\n                 session['logged_in'] = True\r\n                 session['username'] = username\r\n                 session['user_type'] = user['user_type']\r\n"
                },
                {
                    "date": 1740479655727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,10 +147,9 @@\n     \"\"\"\r\n     if request.method == 'POST':\r\n         username = request.form.get('username')\r\n         password = request.form.get('password')\r\n-        print(username)\r\n-        print(password)\r\n+      \r\n         user = get_user(username)\r\n         if user:\r\n             stored_hash = user[\"password_hash\"].encode('utf-8')\r\n             if bcrypt.checkpw(password.encode('utf-8'), stored_hash):\r\n"
                },
                {
                    "date": 1740479660985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,9 @@\n         username = request.form.get('username')\r\n         password = request.form.get('password')\r\n       \r\n         user = get_user(username)\r\n+        print(user)\r\n         if user:\r\n             stored_hash = user[\"password_hash\"].encode('utf-8')\r\n             if bcrypt.checkpw(password.encode('utf-8'), stored_hash):\r\n                 session['logged_in'] = True\r\n"
                },
                {
                    "date": 1740479798936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n     Query the login table for a given username.\r\n     Assumes the table 'login' has columns: username, password_hash, user_type.\r\n     \"\"\"\r\n     config = current_app.config\r\n-    host = config.get('MAIN_DB_HOST')       # Or change this if your login table is in another DB.\r\n-    username_db = config.get('MAIN_DB_USERNAME')\r\n-    password_db = config.get('MAIN_DB_PASSWORD')\r\n-    dbname = config.get('MAIN_DB_NAME')\r\n+    host = config.get('LOGGER_DB_HOST')       # Or change this if your login table is in another DB.\r\n+    username_db = config.get('LOGGER_DB_USERNAME')\r\n+    password_db = config.get('LOGGER_DB_PASSWORD')\r\n+    dbname = config.get('LOGGER_DB_NAME')\r\n     \r\n     conn_str = (\r\n         f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n         f\"SERVER={host};\"\r\n"
                },
                {
                    "date": 1740479942231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,12 +71,12 @@\n     \"\"\"\r\n     Creates a new user in the login table.\r\n     \"\"\"\r\n     config = current_app.config\r\n-    host = config.get('MAIN_DB_HOST')\r\n-    dbname = config.get('MAIN_DB_NAME')\r\n-    db_user = config.get('MAIN_DB_USERNAME')\r\n-    db_pass = config.get('MAIN_DB_PASSWORD')\r\n+    host = config.get('LOGGER_DB_HOST')\r\n+    dbname = config.get('LOGGER_DB_NAME')\r\n+    db_user = config.get('LOGGER_DB_USERNAME')\r\n+    db_pass = config.get('LOGGER_DB_PASSWORD')\r\n     conn_str = (\r\n         f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n         f\"SERVER={host};\"\r\n         f\"DATABASE={dbname};\"\r\n"
                },
                {
                    "date": 1740479950078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,12 +220,12 @@\n     \"\"\"\r\n     Retrieves all users from the login table (excluding password hashes).\r\n     \"\"\"\r\n     config = current_app.config\r\n-    host = config.get('MAIN_DB_HOST')\r\n-    dbname = config.get('MAIN_DB_NAME')\r\n-    db_user = config.get('MAIN_DB_USERNAME')\r\n-    db_pass = config.get('MAIN_DB_PASSWORD')\r\n+    host = config.get('LOGGER_DB_HOST')\r\n+    dbname = config.get('LOGGER_DB_NAME')\r\n+    db_user = config.get('LOGGER_DB_USERNAME')\r\n+    db_pass = config.get('LOGGER_DB_PASSWORD')\r\n     conn_str = (\r\n         f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n         f\"SERVER={host};\"\r\n         f\"DATABASE={dbname};\"\r\n"
                },
                {
                    "date": 1740479958628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,12 +45,12 @@\n     \"\"\"\r\n     Updates the password_hash for the given username in the login table.\r\n     \"\"\"\r\n     config = current_app.config\r\n-    host = config.get('MAIN_DB_HOST')\r\n-    dbname = config.get('MAIN_DB_NAME')\r\n-    db_user = config.get('MAIN_DB_USERNAME')\r\n-    db_pass = config.get('MAIN_DB_PASSWORD')\r\n+    host = config.get('LOGGER_DB_HOST')\r\n+    dbname = config.get('LOGGER_DB_NAME')\r\n+    db_user = config.get('LOGGER_DB_USERNAME')\r\n+    db_pass = config.get('LOGGER_DB_PASSWORD')\r\n     conn_str = (\r\n         f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n         f\"SERVER={host};\"\r\n         f\"DATABASE={dbname};\"\r\n"
                }
            ],
            "date": 1740478221878,
            "name": "Commit-0",
            "content": "import bcrypt\r\nimport pyodbc\r\nfrom flask import Blueprint, render_template, request, redirect, url_for, session, current_app, flash\r\n\r\nauth_bp = Blueprint('auth', __name__)\r\n\r\ndef get_user(username):\r\n    \"\"\"\r\n    Query the login table for a given username.\r\n    Assumes the table 'login' has columns: username, password_hash, user_type.\r\n    \"\"\"\r\n    config = current_app.config\r\n    host = config.get('MAIN_DB_HOST')       # Or change this if your login table is in another DB.\r\n    username_db = config.get('MAIN_DB_USERNAME')\r\n    password_db = config.get('MAIN_DB_PASSWORD')\r\n    dbname = config.get('MAIN_DB_NAME')\r\n    \r\n    conn_str = (\r\n        f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n        f\"SERVER={host};\"\r\n        f\"DATABASE={dbname};\"\r\n        f\"UID={username_db};PWD={password_db}\"\r\n    )\r\n    query = \"SELECT username, password_hash, user_type FROM login WHERE username = ?;\"\r\n    \r\n    try:\r\n        conn = pyodbc.connect(conn_str, timeout=5)\r\n        cursor = conn.cursor()\r\n        cursor.execute(query, (username,))\r\n        row = cursor.fetchone()\r\n        conn.close()\r\n        if row:\r\n            return {\r\n                \"username\": row.username, \r\n                \"password_hash\": row.password_hash,\r\n                \"user_type\": row.user_type\r\n            }\r\n        else:\r\n            return None\r\n    except Exception as e:\r\n        print(\"Error retrieving user:\", e)\r\n        return None\r\n\r\ndef update_password(username, new_password_hash):\r\n    \"\"\"\r\n    Updates the password_hash for the given username in the login table.\r\n    \"\"\"\r\n    config = current_app.config\r\n    host = config.get('MAIN_DB_HOST')\r\n    dbname = config.get('MAIN_DB_NAME')\r\n    db_user = config.get('MAIN_DB_USERNAME')\r\n    db_pass = config.get('MAIN_DB_PASSWORD')\r\n    conn_str = (\r\n        f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n        f\"SERVER={host};\"\r\n        f\"DATABASE={dbname};\"\r\n        f\"UID={db_user};PWD={db_pass}\"\r\n    )\r\n    try:\r\n        conn = pyodbc.connect(conn_str, timeout=5)\r\n        cursor = conn.cursor()\r\n        cursor.execute(\"UPDATE login SET password_hash = ? WHERE username = ?\", (new_password_hash, username))\r\n        conn.commit()\r\n        conn.close()\r\n        return True\r\n    except Exception as e:\r\n        print(\"Error updating password:\", e)\r\n        return False\r\n\r\ndef create_user(username, password_hash, user_type):\r\n    \"\"\"\r\n    Creates a new user in the login table.\r\n    \"\"\"\r\n    config = current_app.config\r\n    host = config.get('MAIN_DB_HOST')\r\n    dbname = config.get('MAIN_DB_NAME')\r\n    db_user = config.get('MAIN_DB_USERNAME')\r\n    db_pass = config.get('MAIN_DB_PASSWORD')\r\n    conn_str = (\r\n        f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n        f\"SERVER={host};\"\r\n        f\"DATABASE={dbname};\"\r\n        f\"UID={db_user};PWD={db_pass}\"\r\n    )\r\n    try:\r\n        conn = pyodbc.connect(conn_str, timeout=5)\r\n        cursor = conn.cursor()\r\n        cursor.execute(\r\n            \"INSERT INTO login (username, password_hash, user_type) VALUES (?, ?, ?)\",\r\n            (username, password_hash, user_type)\r\n        )\r\n        conn.commit()\r\n        conn.close()\r\n        return True\r\n    except Exception as e:\r\n        print(\"Error creating user:\", e)\r\n        return False\r\n\r\n@auth_bp.route('/change-password', methods=['GET', 'POST'])\r\ndef change_password():\r\n    \"\"\"\r\n    Allows a logged-in user to change their password.\r\n    The user must provide the current password, a new password, and a confirmation.\r\n    The new password is hashed and then updated in the database.\r\n    \"\"\"\r\n    if not session.get('logged_in'):\r\n        return redirect(url_for('auth.login'))\r\n    \r\n    if request.method == 'POST':\r\n        current_password = request.form.get('current_password')\r\n        new_password = request.form.get('new_password')\r\n        confirm_password = request.form.get('confirm_password')\r\n        username = session.get('username')\r\n        \r\n        # Ensure new password and confirmation match.\r\n        if new_password != confirm_password:\r\n            flash(\"New password and confirmation do not match.\", \"error\")\r\n            return redirect(url_for('auth.change_password'))\r\n        \r\n        # Retrieve the user record.\r\n        user = get_user(username)\r\n        if not user:\r\n            flash(\"User not found.\", \"error\")\r\n            return redirect(url_for('auth.change_password'))\r\n        \r\n        stored_hash = user[\"password_hash\"].encode('utf-8')\r\n        # Verify the current password.\r\n        if not bcrypt.checkpw(current_password.encode('utf-8'), stored_hash):\r\n            flash(\"Current password is incorrect.\", \"error\")\r\n            return redirect(url_for('auth.change_password'))\r\n        \r\n        # Hash the new password and update in the database.\r\n        new_hash = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')\r\n        if update_password(username, new_hash):\r\n            flash(\"Password updated successfully.\", \"success\")\r\n        else:\r\n            flash(\"Error updating password.\", \"error\")\r\n        return redirect(url_for('auth.change_password'))\r\n    \r\n    return render_template('change_password.html')\r\n\r\n@auth_bp.route('/', methods=['GET', 'POST'])\r\ndef login():\r\n    \"\"\"\r\n    Renders the login page and processes login submissions.\r\n    If the provided credentials match the stored hash, the user is logged in.\r\n    \"\"\"\r\n    if request.method == 'POST':\r\n        username = request.form.get('username')\r\n        password = request.form.get('password')\r\n        \r\n        user = get_user(username)\r\n        if user:\r\n            stored_hash = user[\"password_hash\"].encode('utf-8')\r\n            if bcrypt.checkpw(password.encode('utf-8'), stored_hash):\r\n                session['logged_in'] = True\r\n                session['username'] = username\r\n                return redirect(url_for('dashboard.dashboard'))\r\n            else:\r\n                flash(\"Invalid username or password\", \"error\")\r\n        else:\r\n            flash(\"Invalid username or password\", \"error\")\r\n        return redirect(url_for('auth.login'))\r\n    \r\n    return render_template('login.html')\r\n\r\n@auth_bp.route('/logout')\r\ndef logout():\r\n    \"\"\"\r\n    Logs out the current user by clearing the session and redirecting to login.\r\n    \"\"\"\r\n    session.clear()\r\n    return redirect(url_for('auth.login'))\r\n\r\n@auth_bp.route('/manage-users', methods=['GET', 'POST'])\r\ndef manage_users():\r\n    \"\"\"\r\n    Interface for administrators to manage users.\r\n    Only accessible to users with admin type.\r\n    \"\"\"\r\n    if not session.get('logged_in'):\r\n        return redirect(url_for('auth.login'))\r\n    \r\n    # Check if current user is admin\r\n    current_user = get_user(session.get('username'))\r\n    if not current_user or current_user['user_type'] != 'admin':\r\n        flash(\"Unauthorized access\", \"error\")\r\n        return redirect(url_for('dashboard.dashboard'))\r\n    \r\n    if request.method == 'POST':\r\n        username = request.form.get('username')\r\n        password = request.form.get('password')\r\n        user_type = request.form.get('user_type')\r\n        \r\n        # Basic validation\r\n        if not all([username, password, user_type]):\r\n            flash(\"All fields are required\", \"error\")\r\n            return redirect(url_for('auth.manage_users'))\r\n        \r\n        # Check if user already exists\r\n        if get_user(username):\r\n            flash(\"Username already exists\", \"error\")\r\n            return redirect(url_for('auth.manage_users'))\r\n        \r\n        # Create new user\r\n        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')\r\n        if create_user(username, password_hash, user_type):\r\n            flash(\"User created successfully\", \"success\")\r\n        else:\r\n            flash(\"Error creating user\", \"error\")\r\n        return redirect(url_for('auth.manage_users'))\r\n    \r\n    # For GET request, fetch all users for display\r\n    users = get_all_users()\r\n    return render_template('manage_users.html', users=users)\r\n\r\ndef get_all_users():\r\n    \"\"\"\r\n    Retrieves all users from the login table (excluding password hashes).\r\n    \"\"\"\r\n    config = current_app.config\r\n    host = config.get('MAIN_DB_HOST')\r\n    dbname = config.get('MAIN_DB_NAME')\r\n    db_user = config.get('MAIN_DB_USERNAME')\r\n    db_pass = config.get('MAIN_DB_PASSWORD')\r\n    conn_str = (\r\n        f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n        f\"SERVER={host};\"\r\n        f\"DATABASE={dbname};\"\r\n        f\"UID={db_user};PWD={db_pass}\"\r\n    )\r\n    try:\r\n        conn = pyodbc.connect(conn_str, timeout=5)\r\n        cursor = conn.cursor()\r\n        cursor.execute(\"SELECT username, user_type FROM login\")\r\n        users = [{\"username\": row.username, \"user_type\": row.user_type} for row in cursor.fetchall()]\r\n        conn.close()\r\n        return users\r\n    except Exception as e:\r\n        print(\"Error retrieving users:\", e)\r\n        return []\r\n"
        }
    ]
}