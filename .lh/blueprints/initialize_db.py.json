{
    "sourceFile": "blueprints/initialize_db.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740478663361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740478751287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,17 @@\n     \"\"\"\r\n     try:\r\n         conn = pyodbc.connect(conn_str, timeout=5)\r\n         cursor = conn.cursor()\r\n-        cursor.execute(\"SELECT COUNT(*) FROM sys.tables WHERE name = 'sig_users'\")\r\n+        cursor.execute(\"SELECT COUNT(*) FROM sys.tables WHERE name = 'login'\")\r\n         table_count = cursor.fetchone()[0]\r\n-        print(\"sig_users table count:\", table_count)\r\n+        print(\"login table count:\", table_count)\r\n         if table_count == 0:\r\n             cursor.execute(sig_users_sql)\r\n             conn.commit()\r\n-            print(\"Created sig_users table in LOGGER_DB ([signet_log]).\")\r\n+            print(\"Created login table in LOGGER_DB ([signet_log]).\")\r\n         else:\r\n-            print(\"sig_users table already exists in LOGGER_DB ([signet_log]).\")\r\n+            print(\"login table already exists in LOGGER_DB ([signet_log]).\")\r\n         conn.close()\r\n     except Exception as e:\r\n         print(\"Error initializing LOGGER_DB tables:\", e)\r\n \r\n@@ -72,19 +72,19 @@\n     \r\n     try:\r\n         conn = pyodbc.connect(conn_str, timeout=5)\r\n         cursor = conn.cursor()\r\n-        cursor.execute(\"SELECT COUNT(*) FROM sig_users WHERE username = ?\", (\"admin\",))\r\n+        cursor.execute(\"SELECT COUNT(*) FROM login WHERE username = ?\", (\"admin\",))\r\n         admin_count = cursor.fetchone()[0]\r\n-        print(\"Admin count from sig_users:\", admin_count)\r\n+        print(\"Admin count from login:\", admin_count)\r\n         if admin_count == 0:\r\n             hashed_password = hash_password(\"admin\")\r\n-            insert_sql = \"INSERT INTO sig_users (username, password_hash) VALUES (?, ?)\"\r\n-            cursor.execute(insert_sql, (\"admin\", hashed_password))\r\n+            insert_sql = \"INSERT INTO login (username, password_hash, user_type) VALUES (?, ?, ?)\"\r\n+            cursor.execute(insert_sql, (\"admin\", hashed_password, \"admin\"))\r\n             conn.commit()\r\n-            print(\"Initial admin user created in sig_users (admin/admin).\")\r\n+            print(\"Initial admin user created in login (admin/admin).\")\r\n         else:\r\n-            print(\"Admin user already exists in sig_users.\")\r\n+            print(\"Admin user already exists in login.\")\r\n         conn.close()\r\n     except Exception as e:\r\n         print(\"Error creating initial admin user:\", e)\r\n \r\n"
                },
                {
                    "date": 1740479334912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,9 @@\n         admin_count = cursor.fetchone()[0]\r\n         print(\"Admin count from login:\", admin_count)\r\n         if admin_count == 0:\r\n             hashed_password = hash_password(\"admin\")\r\n+            print(\"Hashed password:\", hashed_password)\r\n             insert_sql = \"INSERT INTO login (username, password_hash, user_type) VALUES (?, ?, ?)\"\r\n             cursor.execute(insert_sql, (\"admin\", hashed_password, \"admin\"))\r\n             conn.commit()\r\n             print(\"Initial admin user created in login (admin/admin).\")\r\n"
                }
            ],
            "date": 1740478663361,
            "name": "Commit-0",
            "content": "import pyodbc\r\nimport bcrypt\r\nfrom flask import current_app\r\n\r\ndef hash_password(plain_password):\r\n    \"\"\"Return a bcrypt hashed password.\"\"\"\r\n    salt = bcrypt.gensalt()\r\n    hashed = bcrypt.hashpw(plain_password.encode('utf-8'), salt)\r\n    return hashed.decode('utf-8')\r\n\r\ndef ensure_logger_db_tables():\r\n    \"\"\"\r\n    Ensures that the required tables exist in the Logger Database ([signet_log]).\r\n    In this example, we create a 'sig_users' table to store user credentials.\r\n    \"\"\"\r\n    config = current_app.config\r\n    host = config.get('LOGGER_DB_HOST')\r\n    username = config.get('LOGGER_DB_USERNAME')\r\n    password = config.get('LOGGER_DB_PASSWORD')\r\n    dbname = config.get('LOGGER_DB_NAME')  # Should be set to 'signet_log'\r\n    \r\n    conn_str = (\r\n        f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n        f\"SERVER={host};\"\r\n        f\"DATABASE={dbname};\"\r\n        f\"UID={username};PWD={password}\"\r\n    )\r\n    \r\n    # Create the login table if it doesn't exist.\r\n    sig_users_sql = \"\"\"\r\n        CREATE TABLE login (\r\n            id INT IDENTITY(1,1) PRIMARY KEY,\r\n            username VARCHAR(100) NOT NULL UNIQUE,\r\n            password_hash VARCHAR(255) NOT NULL,\r\n            user_type VARCHAR(50) NOT NULL DEFAULT 'user',\r\n            created_at DATETIME DEFAULT GETDATE()\r\n        );\r\n    \"\"\"\r\n    try:\r\n        conn = pyodbc.connect(conn_str, timeout=5)\r\n        cursor = conn.cursor()\r\n        cursor.execute(\"SELECT COUNT(*) FROM sys.tables WHERE name = 'sig_users'\")\r\n        table_count = cursor.fetchone()[0]\r\n        print(\"sig_users table count:\", table_count)\r\n        if table_count == 0:\r\n            cursor.execute(sig_users_sql)\r\n            conn.commit()\r\n            print(\"Created sig_users table in LOGGER_DB ([signet_log]).\")\r\n        else:\r\n            print(\"sig_users table already exists in LOGGER_DB ([signet_log]).\")\r\n        conn.close()\r\n    except Exception as e:\r\n        print(\"Error initializing LOGGER_DB tables:\", e)\r\n\r\ndef create_initial_admin():\r\n    \"\"\"\r\n    Creates an initial admin user (username: \"admin\", password: \"admin\")\r\n    in the sig_users table (in [signet_log]) if no such user exists.\r\n    \"\"\"\r\n    config = current_app.config\r\n    host = config.get('LOGGER_DB_HOST')\r\n    username_db = config.get('LOGGER_DB_USERNAME')\r\n    password_db = config.get('LOGGER_DB_PASSWORD')\r\n    dbname = config.get('LOGGER_DB_NAME')  # Should be 'signet_log'\r\n    \r\n    conn_str = (\r\n        f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\r\n        f\"SERVER={host};\"\r\n        f\"DATABASE={dbname};\"\r\n        f\"UID={username_db};PWD={password_db}\"\r\n    )\r\n    \r\n    try:\r\n        conn = pyodbc.connect(conn_str, timeout=5)\r\n        cursor = conn.cursor()\r\n        cursor.execute(\"SELECT COUNT(*) FROM sig_users WHERE username = ?\", (\"admin\",))\r\n        admin_count = cursor.fetchone()[0]\r\n        print(\"Admin count from sig_users:\", admin_count)\r\n        if admin_count == 0:\r\n            hashed_password = hash_password(\"admin\")\r\n            insert_sql = \"INSERT INTO sig_users (username, password_hash) VALUES (?, ?)\"\r\n            cursor.execute(insert_sql, (\"admin\", hashed_password))\r\n            conn.commit()\r\n            print(\"Initial admin user created in sig_users (admin/admin).\")\r\n        else:\r\n            print(\"Admin user already exists in sig_users.\")\r\n        conn.close()\r\n    except Exception as e:\r\n        print(\"Error creating initial admin user:\", e)\r\n\r\ndef initialize_all_tables(app):\r\n    \"\"\"\r\n    Initialize the required tables in the Logger Database and create the initial admin.\r\n    This function should be called within an app context.\r\n    \"\"\"\r\n    with app.app_context():\r\n        ensure_logger_db_tables()\r\n        create_initial_admin()\r\n\r\nif __name__ == \"__main__\":\r\n    from app import app  # Make sure your app.py creates your Flask app and loads config\r\n    initialize_all_tables(app)\r\n"
        }
    ]
}