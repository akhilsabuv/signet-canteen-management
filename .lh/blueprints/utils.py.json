{
    "sourceFile": "blueprints/utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740388365650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740388365650,
            "name": "Commit-0",
            "content": "import json\r\nimport logging\r\nimport datetime\r\nimport win32print\r\nimport win32ui\r\nfrom logging.handlers import RotatingFileHandler\r\n\r\n# Configure logging\r\nlogging.basicConfig(\r\n    handlers=[RotatingFileHandler('app.log', maxBytes=100000, backupCount=5)],\r\n    level=logging.INFO,\r\n    format='%(asctime)s - %(levelname)s - %(message)s'\r\n)\r\nlogger = logging.getLogger(__name__)\r\n\r\ndef load_config(config_file):\r\n    \"\"\"\r\n    Load configuration from JSON file\r\n    \"\"\"\r\n    try:\r\n        with open(config_file, 'r') as f:\r\n            config = json.load(f)\r\n        return config\r\n    except FileNotFoundError:\r\n        logger.error(f\"Config file {config_file} not found\")\r\n        # Return default configuration\r\n        return {\r\n            \"selected_printer\": win32print.GetDefaultPrinter(),\r\n            \"font_name\": \"Arial\",\r\n            \"font_size\": 10,\r\n            \"margin_left\": 100,\r\n            \"margin_top\": 100\r\n        }\r\n    except Exception as e:\r\n        logger.error(f\"Error loading config: {str(e)}\")\r\n        return {}\r\n\r\ndef log_event(message):\r\n    \"\"\"\r\n    Log events to file\r\n    \"\"\"\r\n    try:\r\n        logger.info(message)\r\n    except Exception as e:\r\n        print(f\"Logging error: {str(e)}\")\r\n\r\ndef print_token(printer_name, user_id, meal_name, meal_time):\r\n    \"\"\"\r\n    Print token with enhanced formatting\r\n    \"\"\"\r\n    try:\r\n        # Create printer DC\r\n        hprinter = win32ui.CreateDC()\r\n        hprinter.CreatePrinterDC(printer_name)\r\n        \r\n        # Start print job\r\n        hprinter.StartDoc(\"Canteen Token\")\r\n        hprinter.StartPage()\r\n\r\n        # Set font\r\n        font = win32ui.CreateFont({\r\n            \"name\": \"Arial\",\r\n            \"height\": 30,\r\n            \"weight\": 700\r\n        })\r\n        hprinter.SelectObject(font)\r\n\r\n        # Print header\r\n        hprinter.TextOut(100, 100, \"CANTEEN TOKEN\")\r\n        \r\n        # Change font for details\r\n        font = win32ui.CreateFont({\r\n            \"name\": \"Arial\",\r\n            \"height\": 25,\r\n            \"weight\": 400\r\n        })\r\n        hprinter.SelectObject(font)\r\n\r\n        # Print details\r\n        hprinter.TextOut(100, 200, f\"User ID: {user_id}\")\r\n        hprinter.TextOut(100, 250, f\"Meal: {meal_name}\")\r\n        hprinter.TextOut(100, 300, f\"Time: {meal_time}\")\r\n        \r\n        # Print footer\r\n        hprinter.TextOut(100, 400, \"=\" * 40)\r\n        current_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n        hprinter.TextOut(100, 450, f\"Printed: {current_time}\")\r\n\r\n        # End print job\r\n        hprinter.EndPage()\r\n        hprinter.EndDoc()\r\n        hprinter.DeleteDC()\r\n\r\n        log_event(f\"Token printed successfully for User {user_id}\")\r\n        return True\r\n\r\n    except Exception as e:\r\n        log_event(f\"Print error: {str(e)}\")\r\n        return False\r\n\r\ndef get_available_printers():\r\n    \"\"\"\r\n    Get list of available printers\r\n    \"\"\"\r\n    try:\r\n        printers = [printer[2] for printer in win32print.EnumPrinters(2)]\r\n        return printers\r\n    except Exception as e:\r\n        log_event(f\"Error getting printers: {str(e)}\")\r\n        return []\r\n\r\ndef validate_printer(printer_name):\r\n    \"\"\"\r\n    Validate if printer exists\r\n    \"\"\"\r\n    try:\r\n        printers = get_available_printers()\r\n        return printer_name in printers\r\n    except Exception as e:\r\n        log_event(f\"Error validating printer: {str(e)}\")\r\n        return False"
        }
    ]
}