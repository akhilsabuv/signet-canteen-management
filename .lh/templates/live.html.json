{
    "sourceFile": "templates/live.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740486774175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740486774175,
            "name": "Commit-0",
            "content": "{% extends \"base.html\" %}\r\n{% block title %}Live Triggers - Canteen Tool{% endblock %}\r\n\r\n{% block content %}\r\n<div class=\"container mt-4\">\r\n    <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n            <h3 class=\"mb-0\">\r\n                <i class=\"bi bi-broadcast\"></i> Live Canteen Triggers\r\n            </h3>\r\n            <span id=\"connection-status\" class=\"badge bg-success\">Connected</span>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <div id=\"events-container\">\r\n                <!-- Events will be displayed here -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<template id=\"event-template\">\r\n    <div class=\"alert mb-3 fade show\" role=\"alert\">\r\n        <div class=\"d-flex justify-content-between align-items-center\">\r\n            <div>\r\n                <strong class=\"device-name\"></strong>\r\n                <span class=\"status-message\"></span>\r\n            </div>\r\n            <small class=\"text-muted timestamp\"></small>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    document.addEventListener('DOMContentLoaded', function() {\r\n        const socket = io();\r\n        const eventsContainer = document.getElementById('events-container');\r\n        const eventTemplate = document.getElementById('event-template');\r\n        const connectionStatus = document.getElementById('connection-status');\r\n        const maxEvents = 5;\r\n\r\n        // Socket connection handlers\r\n        socket.on('connect', () => {\r\n            connectionStatus.textContent = 'Connected';\r\n            connectionStatus.className = 'badge bg-success';\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            connectionStatus.textContent = 'Disconnected';\r\n            connectionStatus.className = 'badge bg-danger';\r\n        });\r\n\r\n        socket.on('canteen_trigger', function(data) {\r\n            // Create new event element from template\r\n            const newEvent = eventTemplate.content.cloneNode(true);\r\n            const alertDiv = newEvent.querySelector('.alert');\r\n            const deviceName = newEvent.querySelector('.device-name');\r\n            const statusMessage = newEvent.querySelector('.status-message');\r\n            const timestamp = newEvent.querySelector('.timestamp');\r\n\r\n            // Set content and styles\r\n            deviceName.textContent = `Device ${data.device_id}: `;\r\n            statusMessage.textContent = data.is_valid ? 'Valid Coupon' : 'Invalid Coupon';\r\n            timestamp.textContent = new Date().toLocaleTimeString();\r\n\r\n            // Set appropriate alert style\r\n            if (data.is_valid) {\r\n                alertDiv.classList.add('alert-success');\r\n            } else {\r\n                alertDiv.classList.add('alert-danger');\r\n            }\r\n\r\n            // Add the new event at the top\r\n            eventsContainer.insertBefore(alertDiv, eventsContainer.firstChild);\r\n\r\n            // Remove old events if exceeding maxEvents\r\n            while (eventsContainer.children.length > maxEvents) {\r\n                eventsContainer.lastChild.remove();\r\n            }\r\n        });\r\n\r\n        // Optional: Add a test trigger button (remove in production)\r\n        const testButton = document.createElement('button');\r\n        testButton.className = 'btn btn-sm btn-outline-primary mt-3';\r\n        testButton.textContent = 'Test Trigger';\r\n        testButton.onclick = () => {\r\n            socket.emit('test_trigger');\r\n        };\r\n        eventsContainer.after(testButton);\r\n    });\r\n</script>\r\n{% endblock %}\r\n"
        }
    ]
}